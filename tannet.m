function [Y,Xf,Af] = tannet(x,~,~)
%TANNET neural network simulation function.
%
% Auto-generated by MATLAB, 26-Oct-2022 11:50:49.
% 
% [Y] = tannet(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Layer 1
b1 = [0.34205933558180734444;-1.1016898135050623431;0.30399305043760582734;-6.0460237467618762608;-8.5905122313757384944;3.9992483897845247931;7.2169596274696790061;-3.2064011825718612414;11.940757031253719234;4.1966319926150879027;3.7868108609527570962;-7.8851082252682598295;6.1801423463693847538;0.53444163771740349489];
IW1_1 = [1.3727945457655954531 -1.0095407203538235841 0.073960358633505321468 -5.9024166989972695063;4.6972638322981321579 -1.8059203821232370224 -8.1569329537171313405 0.081652144721812452977;1.5771296669729042428 -1.2111387302017946332 0.15416956497187619957 -5.6838417384116421971;-2.6239419792550835453 2.8004438115198637682 7.0820935054731055658 -0.10865247069256422918;8.0918981209132336829 -0.13815604285510826865 7.1349219809944601778 0.041475247490104359682;-3.4802042985544208165 0.5236512657163936435 -3.8919843394226569799 -0.029159478710120149275;-3.8532646116468214359 -4.1177465901955532246 0.89595357949208198622 -1.6171465777742293213;1.2125295465126131322 0.8462770608507924619 -0.74094784230142718418 2.7212790242620221726;-32.580210745051793708 -8.2810435311169978689 -6.6621206293132386733 -0.0078661230357466530722;-5.7830890349985191179 -8.0720477577067821784 -0.52834251862525338783 0.0045984519774537359338;-5.6908366701974539836 -7.2973823524378138572 -0.33805940115787347366 0.0082847884798441986248;4.6690757039706838327 2.9026091274904048944 -2.0559172708513995254 11.126247039764971092;19.819021584644623601 4.3250652666783722111 -13.05069222052869371 0.076333804568511992583;-20.241996498874289756 -1.6320673927777629153 -5.3916817505434089242 6.2936882397716980009];

% Layer 2
b2 = [0.37007419879021735687;0.16327802682250475153];
LW2_1 = [0.0027705144973465684055 -0.21955191237341864507 -0.0082902325014539389458 0.11733873682143201866 0.58313533097192504773 0.85829845492216505498 0.033276246862328606735 0.016550707307573089833 0.20246241330152753291 3.3880975477629200476 -3.6175581881181342325 -0.0023622065399608515798 -0.2567566126019652506 0.005763423610728290146;-1.6184752679035381284 0.07013762774799099653 1.3845054283547315599 -0.060664813460137120837 -0.13620214913586597971 -0.22691007212089864264 0.047674285389107243227 -0.24905814419062782816 -0.022641757340115423874 -0.25314891536899908342 0.23602566602265573348 0.16127527543840028401 0.0063903092819873087704 0.049222642971060361072];

% ===== SIMULATION ========
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
X=x';
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    % no processing
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*X{1,ts});
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = a2;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
Y=-1.*Y'; %%%% times -1 due to the minimizing ObjFn %%%%%
Y(:,1)=-1.*Y(:,1);
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
end

% ===== MODULE FUNCTIONS ========

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
