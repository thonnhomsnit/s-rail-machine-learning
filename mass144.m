function [Y,Xf,Af] = mass144(x,~,~)
%MASS144 neural network simulation function.
%
% Auto-generated by MATLAB, 02-Mar-2023 11:06:12.
% 
% [Y] = mass144(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Layer 1
b1 = [-0.82323718624038610958;5.57199079012292664;-4.7480037392159077925;-0.78096151047407946777;-1.7104826528935694885;1.3808869377723886895;-6.3355116830411901674;1.3139865752047776848;3.4501636283642294067;-0.76733824452076238032;2.5816927922837602516;3.3259788866922792572;2.4181085965745858779;-6.0596826377361603377];
IW1_1 = [0.26761385752214111866 -0.79000535944029293134 -0.23966654990412664117 0.498318499807725801;3.5626680718347358834 2.8188545308121972788 -6.4529196291778720962 -0.26392914856225435649;-0.077277143269837145212 0.48354146745494941406 -0.39643230777987115143 4.9811453920725501376;-0.1228207945412984059 0.54097444612710310352 -0.47541973290356576154 -3.8146939202384513301;1.8158150119476401674 -0.25693451800305866506 -0.0072137647498900373325 -0.10986593532802929607;-1.2070810105772911136 0.14404827250798135641 0.020231310936394127781 -0.012814107251614255401;3.3703678943984702876 1.641426371913288218 2.1862186630046251956 3.1548598598078987365;2.626789554946490135 2.8908116390854572408 -4.8632635690840402276 1.3646469015922448875;3.530258403908959508 2.7936519540086712787 -4.3165402864151491968 -0.25266109291001553894;-0.306727559435211794 0.20219169816111237648 -0.032200671525083643387 0.2032345089162801155;-5.0710348968838294681 -4.0140785727885219814 -3.9366123792722396146 0.40856577268357524568;-1.5967681516665932495 -1.5656746657383919796 -3.5775758958137582333 0.079653425251545451058;-4.7716785483326296102 -3.7654838601839140111 -4.8673945057561303074 0.40267753833432368138;0.35470090674932269748 -0.9986679371697694263 1.2973018137973726382 7.0986868730224790269];

% Layer 2
b2 = 2.2804439014108752737;
LW2_1 = [-0.14873943559270630388 2.1828391567503615533 0.10755001082809446944 -0.18188135515324790892 -0.87425874456021923642 -1.753805999952379846 0.0025773035119204773351 -0.0064910755187169077648 -2.2192032062532898173 2.4930325581750860664 -0.17405170293913624358 0.010308120737664799513 0.18709737519036723219 -0.046532028912669429199];

% ===== SIMULATION ========
%%%%%%%%%%%%%%%%%%%%%%%%%% normalize input, not original code %%%%%%%%%%%%
x(:,1) = (x(:,1)-1)/(3-1);
x(:,2) = (x(:,2)-100)/(160-100);
x(:,3) = (x(:,3)-300)/(500-300);
x(:,4) = (x(:,4)-2)/(5-2);

X=x';
%%%%%%%%%%%%%%%%%%%%%%%%%% normalize input, not original code %%%%%%%%%%%%
% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    % no processing
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*X{1,ts});
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = a2;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
Y(1,:)= ((Y(1,:))*(6.23578-1.395))+1.395; %Mass
Y= 1.*Y';
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
end

% ===== MODULE FUNCTIONS ========

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
