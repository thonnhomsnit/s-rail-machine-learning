function [Y,Xf,Af] = net10(x,~,~)
%NET10 neural network simulation function.
%
% Auto-generated by MATLAB, 25-Jul-2022 14:10:12.
% 
% [Y] = net10(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0];
x1_step1.gain = [2;2];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.6160265791384058609;-0.12340597737050623683;-0.50244705496137287426;-0.68233684058414689755;2.7033379284262464282;-3.8469045455611041717];
IW1_1 = [-0.11353597963513731295 -2.4131353879480959002;0.11302926595713445879 0.79868682385467604234;0.36387749251141215945 -0.48359721047286374773;-1.5034390199633622665 -0.28167581515508399725;-0.067538727960450684051 -3.3271678797931842908;-3.3249042519796176975 -1.9633694917344464148];

% Layer 2
b2 = [0.67277891454070870569;0.3399957957762013705];
LW2_1 = [-0.36676213367872356752 -1.5482997381438807771 1.0631366915839188803 0.47308323705208910059 -0.49655423367020179448 -0.0054270088932418941718;-0.71293597678493947356 -2.011250528145421157 0.71955257001047712162 0.36138100609671192087 -0.34433063624240933809 0.14320739010184641016];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.231691694937393;0.0130056267060807];
y1_step1.xoffset = [7.41698264089725;62.883399963];

% ===== SIMULATION ========
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
X=x';
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
Y=Y'; %%%% times -1 due to the minimizing ObjFn %%%%%
Y(:,1)=-1.*Y(:,1);
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
