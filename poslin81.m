function [Y,Xf,Af] = poslin81(x,~,~)
%POSLIN81 neural network simulation function.
%
% Auto-generated by MATLAB, 04-Dec-2022 22:10:47.
% 
% [Y] = poslin81(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Layer 1
b1 = [0.58256005060837112719;-0.73928693552368129893;-0.863480716978618279;0.55671396723011146168;1.0533545575320890642;0.98675952182205661778;-0.78088167499075744615;0.19607940315641736451;-0.79631552584480580492;0.36224356243081085038;-1.013342667009678344;-0.91063026374105582317];
IW1_1 = [-0.41954372949978102625 -0.17356594622459015076 0.51567067371425123756 -1.3302496611522591774;0.041431798019232912722 -0.92015137099912158725 0.15530168263088262037 -0.96096764916166255155;0.063185603155667013908 0.13216414018698885435 -0.21865116403451101412 -0.61240177279830154689;1.2159592058830150929 -0.58741660898737846352 0.13829972460112066601 -0.018949184112828330873;-0.32867688445226062033 -0.14240199771380276927 0.56176257297888032571 -1.9723427198918277448;-1.2680231143795646087 1.1690318307579370405 0.39604197704541393987 0.1963560150895830303;-0.54253211324146399797 -0.1889724405048209821 0.60684800523431881025 -0.94584439430472388999;-1.0390891004922480079 -0.16926793864703149062 -0.29104171545372437002 0.30631135787451824193;-0.71461002603638168473 -0.5495129535691485323 -0.42652793186301107831 0.489091106172920842;-1.4957510998873180252 0.45823837355204471988 0.00017440159333151697418 0.01726378234373373427;0.41085520761245342136 0.262418001132595613 -0.019704995495460717048 0.92276435830364644808;-0.22485777179062704789 -0.47594624253223399846 0.48955766071608297629 0.590355560492344833];

% Layer 2
b2 = [0.46955604411192580772;0.1378335330399430847];
LW2_1 = [0.021859277271040804258 0.43839693684743230584 0.14459340699399136909 -0.25957432489375792395 0.00095647848138233522441 0.06765695148762138067 0.88784384790329196058 -0.040705749369019328388 -0.56366546292483654668 0.42688471757352930425 -0.024563767457720892678 0.0027540177961575124099;1.1907877642171447174 0.024021357989232550167 -0.37026010684181143162 0.38604801292289875336 -1.1855104318758025173 0.21031650687442521308 0.41665890966924901129 0.13276288205834527179 -0.33431446523375552005 0.024659878655869129499 -0.80278300572053662432 0.23070157675951724618];

% ===== SIMULATION ========
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
X=x';
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    % no processing
    
    % Layer 1
    a1 = poslin_apply(repmat(b1,1,Q) + IW1_1*X{1,ts});
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = a2;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
Y(1,:)= ((Y(1,:))*(163.2073517-65.22771454))+65.22771454; %IPF
Y(2,:)= ((Y(2,:))*(2217.028012-729.5885))+729.5885; %SEA
Y=-1.*Y'; %%%% times -1 due to the minimizing ObjFn %%%%%
Y(:,1)=-1.*Y(:,1);
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
end

% ===== MODULE FUNCTIONS ========

% Linear Positive Transfer Function
function a = poslin_apply(n,~)
  a = max(0,n);
  a(isnan(n)) = nan;
end
