function [Y,Xf,Af] = new144poslin(x,~,~)
%NEW144POSLIN neural network simulation function.
%
% Auto-generated by MATLAB, 20-Nov-2022 18:17:59.
% 
% [Y] = new144poslin(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Layer 1
b1 = [-0.19812429206367349055;-0.082834047676704714025;0.14729737790831246014;0.18067348887296455495;-0.094858000380504944871;-0.62727333324709055873;0.1190413101479665392;0.47338151865282873665;1.0066092961455954669;-0.27471732033202034273;-0.88157547235419186915;0.78805174691578261381];
IW1_1 = [0.74317223558952949514 -0.21400525049156388091 -0.01570765215178083346 0.094439285037452788685;-0.7551325449593042638 -0.78256416721507204848 -0.025191184005015049285 -0.92546883939158464116;0.68781774703348019795 -0.14746011662106534024 0.72712535828361923862 -0.14840452559443809144;1.2755370693401926196 0.26059790696729628889 -0.21131815686193683446 0.44807071919499724677;0.34333365688852435227 0.12320130893782452186 -0.47532158149852637985 0.86015612245473493935;0.55559447404801254322 0.035269419585121981886 -0.114755242658316714 -0.2546158679225431487;-0.52221127635714048587 -0.88220030119303916027 -0.08470077938336395551 -0.85740240930392830343;-0.67169696208374118918 -0.057317663233663843081 0.0038198546088095489126 0.50614016466550526552;-0.52227257702208740309 -0.24558635652296098573 0.21066854953217203916 -1.2408862817858061778;-0.67421276284037734428 -0.075916153500632965745 -0.32932312760763915449 -0.40766054492520731323;0.0019146945019762207779 -0.050485623167158572011 0.8849842542423727032 0.042661793672209000206;0.54435205310368239839 -0.55015953269102535472 -0.45578229625041755124 0.26799067008373622656];

% Layer 2
b2 = [1.2244023839028381762;1.9823821441199431792];
LW2_1 = [1.1147039074864990571 -0.91806890313677425031 -0.52243800435290665973 -0.23616282245268513384 0.0082292087152085035412 0.23999014710963709196 -0.57425226485302627299 0.23342665174689947172 -0.082815614231619177898 -0.65653216770056177509 -0.54300109069325019906 -0.76540731633694092384;0.43579199794433798321 0.15535149425481906138 0.25269992505404725858 -1.1837418096453309335 0.59364245215798927546 0.63871905867213907282 0.89325028394631311723 -1.0593734565886074872 -1.3863254823665214222 -0.85889118991665425185 0.22026318249138207572 0.028482397909481638881];

% ===== SIMULATION ========
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
X=x';
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    % no processing
    
    % Layer 1
    a1 = poslin_apply(repmat(b1,1,Q) + IW1_1*X{1,ts});
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = a2;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
Y(1,:)= ((Y(1,:))*(163.207-37.1100))+37.1100; %IPF
Y(2,:)= ((Y(2,:))*(2435.1150-729.5885))+729.5885; %SEA
Y=-1.*Y'; %%%% times -1 due to the minimizing ObjFn %%%%%
Y(:,1)=-1.*Y(:,1);
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
end

% ===== MODULE FUNCTIONS ========

% Linear Positive Transfer Function
function a = poslin_apply(n,~)
  a = max(0,n);
  a(isnan(n)) = nan;
end
