function [Y,Xf,Af] = net20(x,~,~)
%NET20 neural network simulation function.
%
% Auto-generated by MATLAB, 25-Jul-2022 14:10:06.
% 
% [Y] = net20(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0];
x1_step1.gain = [2;2];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.19666961820180434151;1.5328116901555544072;-1.3006046385081055927;-3.0759342518459011906;-0.33857839826644298142;0.37153174948241080022;-0.89306491483285455057;19.73931987828918011;-9.2826366382644227571];
IW1_1 = [-0.082268108631260453145 -1.3687237153453479799;-0.14220835139556964322 -2.5567981067618772428;0.072043940289618760286 5.9978494825406558633;7.9693306119332945059 -1.0634539548616137594;5.1777709787947774345 -6.1801087370773410967;-1.1931147431408559711 1.2881875409777858721;-1.6519636826749659608 0.16973377951758172877;17.234656947389488835 20.688113364759370683;-4.2655854655160867495 -9.7557530895619830602];

% Layer 2
b2 = [0.49591820299785949189;0.18978169264955055406];
LW2_1 = [0.92470106578388033824 -0.42304709841181653562 -0.0075143855040166063902 -0.0063234389619789615686 -0.21105032351924668532 -0.6443676722471285423 0.57134437960848738491 0.065165602148726770038 0.11460971494133749549;0.94352142260517990469 -0.17549931676860180962 0.10465606271653199455 0.022388970886613665523 -0.024307343417987171269 -0.085028271774524710747 0.44608444629255100677 0.0039107345338620751185 0.11268834625671161898];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.253798967853687;0.0115984452459331];
y1_step1.xoffset = [6.94683751383763;62.025100708];

% ===== SIMULATION ========
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
X=x';
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
Y=Y'; %%%% times -1 due to the minimizing ObjFn %%%%%
Y(:,1)=-1.*Y(:,1);
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
