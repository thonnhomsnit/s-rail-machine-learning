function [Y,Xf,Af] = mass(x,~,~)
%MASS neural network simulation function.
%
% Auto-generated by MATLAB, 28-Feb-2023 17:49:32.
% 
% [Y] = mass(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Layer 1
b1 = [0.48773899047850827193;0.69828381062008126889;-0.90994297122719247639;0.49978718074879058264;0.52535040762143547788;0.7262645777276536263;-0.042136878805263962289;0.55393304990552427736;0.59779178575138092189;1.711110337073093568];
IW1_1 = [0.6294237612465984899 1.0033005763280136158 0.47987233094039816184 0.30543228682064871293;-0.00046293214226078918672 0.072734780810015317587 -0.68718369710077242818 -0.043141613578438452181;0.93596305962095793785 -0.04677029198327497389 0.045937215325923048959 -0.57042494022506229356;-0.83628781292722753626 -0.27254171679247529703 0.50270121268425194128 -0.55502904970797828366;-1.8227880551211754767 -2.426425952475615766 -1.5099922070230229476 -2.2457679887596562196;0.83295401909105426519 0.26082441490550928309 1.1844916353365275707 -0.74120931270529200052;-0.83296795546608448646 -0.60924191689631079782 0.040088798211662120263 -0.51565671262716505918;-0.0066466897457746424577 0.18770195447032567149 0.87285576814570897675 -0.25832823833275597725;0.0019502515126908204213 1.0318722322677638115 -0.65817018528704496205 -1.8593025459700678326;1.872422391891909621 -2.044876591470101701 1.9469219400553596788 -3.8520750001326962142];

% Layer 2
b2 = 0.5006207782816538554;
LW2_1 = [0.52411677915283416684 -0.41719997833179300883 0.5755135954860227665 0.074624826032221772132 -0.015731285868229447772 -0.56281117360456811571 -0.082645230350364029537 -0.046457563952684674535 -0.074248379037694073324 0.040822644845080288678];

% ===== SIMULATION ========
%%%%%%%%%%%%%%%%%%%%%%%%%% normalize input, not original code %%%%%%%%%%%%
x(:,1) = (x(:,1)-1)/(2-1);
x(:,2) = (x(:,2)-120)/(160-120);
x(:,3) = (x(:,3)-300)/(500-300);
x(:,4) = (x(:,4)-2)/(5-2);

X=x';
%%%%%%%%%%%%%%%%%%%%%%%%%% normalize input, not original code %%%%%%%%%%%%
% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    % no processing
    
    % Layer 1
    a1 = poslin_apply(repmat(b1,1,Q) + IW1_1*X{1,ts});
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = a2;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
Y(1,:)= ((Y(1,:))*(6.23578-1.81576))+1.81576; %Mass
Y= 1.*Y';
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
end

% ===== MODULE FUNCTIONS ========

% Linear Positive Transfer Function
function a = poslin_apply(n,~)
  a = max(0,n);
  a(isnan(n)) = nan;
end
