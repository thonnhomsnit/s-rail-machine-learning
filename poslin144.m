function [Y,Xf,Af] = poslin144(x,~,~)
%POSLIN144 neural network simulation function.
%
% Auto-generated by MATLAB, 21-Nov-2022 20:25:32.
% 
% [Y] = poslin144(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Layer 1
b1 = [1.0911704422845889262;-0.024465723609569806074;-0.32474278059181144185;-1.0415690811642577263;-0.66442375125516628387;-0.81436234690866071695;1.0253499844847597799;0.86177674684955352102;-0.14061398070611194622;0.45088184893268562492;-0.059841767486608583859;-0.26840303557052686001];
IW1_1 = [-0.57358941924146589209 0.037554281884853359108 -0.071166910993171753064 -1.0039180287068614206;0.88093785180101957799 -0.47774000410152384077 -1.5254165289647412251 1.2592550993388327285;0.76916331691454509212 0.040489439796844266251 -0.81893695537645061489 1.9146801019826928947;0.56031042194377200794 0.32400044557705975912 -0.19422349285742879221 1.21012659964744973;-0.2432847329642151557 -0.52487521790128055521 -0.14402607767253949866 -0.024421929996121694018;-0.98138073962597083266 -0.91177917358160098793 -0.4611317200436677588 0.79795405636184124631;-1.1562588566663491996 0.13070562881723035709 -0.0023247093364626922329 -0.73272997967626329885;1.7530814485745156439 -0.5524384586679120801 -0.079647342524087644255 -0.0027923170954180787096;0.46779398095331059526 0.77506151847067450422 0.52505157789549328218 -1.2609622189532436742;-1.5008530664411736666 0.47329523786273808295 -0.1916449435840754667 0.28756926856985243202;2.7702609753316056462 -0.63349258825628607106 -0.081098301497713520813 -0.011198831330530782668;0.079946028506084287901 1.2644677195437215023 0.79195373342898556235 0.089397849264415407688];

% Layer 2
b2 = [0.8846728656415028258;0.032776021922950912546];
LW2_1 = [0.011289967088321077593 0.0024704080865474136591 0.018123395161365296602 -0.043855682404016521625 0.94458421336696418713 0.42797193301558178469 0.092123517418201850138 -0.69517033262885441491 -0.0090121857624744505788 0.20534003547169649151 0.32921729655447995455 0.010647649131442640108;-0.68941353231851232319 -0.017732358857667412932 0.45393904474366164603 -1.4439214244895715034 0.1817252136284270847 0.99975985373205844553 0.59194987886700778379 0.23936831076347483971 -0.30257463798867273441 -0.1299299677530296182 -0.024322587333376201324 0.25899308995589354065];

% ===== SIMULATION ========
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
X=x';
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    % no processing
    
    % Layer 1
    a1 = poslin_apply(repmat(b1,1,Q) + IW1_1*X{1,ts});
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = a2;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
Y(1,:)= ((Y(1,:))*(163.2073517-37.10995))+37.10995; %IPF
Y(2,:)= ((Y(2,:))*(2435.154665-729.5885))+729.5885; %SEA
Y=-1.*Y'; %%%% times -1 due to the minimizing ObjFn %%%%%
Y(:,1)=-1.*Y(:,1);
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
end

% ===== MODULE FUNCTIONS ========
% Linear Positive Transfer Function
function a = poslin_apply(n,~)
  a = max(0,n);
  a(isnan(n)) = nan;
end
