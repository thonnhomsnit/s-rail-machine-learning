function [Y,Xf,Af] = tansig144(x,~,~)
%TANSIG144 neural network simulation function.
%
% Auto-generated by MATLAB, 31-Oct-2022 16:30:56.
% 
% [Y] = tansig144(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Layer 1
b1 = [5.9205369124936098046;0.98020319834497837697;-4.3349652862519301166;-0.27165422958482843274;-1.7568062079634514383;4.7323468822337568795;2.0778760776743796512;-2.2275685180533302265;-2.233826700833158263;0.85469712893664362419;7.4337791306168776728;-1.7207933764938909693;-0.76247346876869759313;-6.0231177871783545541;0.15098819547504543914];
IW1_1 = [-0.58254931983044744292 1.735138709868221385 -2.1863322955854651575 -3.5463306489464594407;-0.74026806411994772184 0.3993533023832813722 0.21997224064627232676 0.062692107656204018595;-0.30034435708416995503 -4.7996099972465353645 3.5647911214590060069 5.7448138065324521051;2.3691345034466637642 1.2537225270579930303 -1.3549459994286903175 -7.9332327321058437875;6.651375088577486494 -4.3125562474355172426 -0.17903423605590662593 -0.1467192321578182912;-2.477710918567582965 -1.8142752067098717461 0.61773682872575708114 -2.5385020892841780871;6.7161748606228739433 -0.73207065553484729215 -2.7256319751932758244 -9.5598945977056040135;2.5141658000875684031 0.50381763049206806926 2.7980050031653136422 0.16292535970765426034;6.1889529324918512998 4.051031544090175629 -2.1174125601454019119 -2.613289419392879509;-0.95247402007131731771 -0.98147257958432765346 -1.3066848243099264959 0.041111652574048460074;-8.6548094693685087009 -13.122238259170167396 -12.146739498332435048 -0.0063259460114098910871;0.98698911071775341508 2.2515174036021781134 0.50675590195181341446 1.9070023988286022298;-3.3489863557450192388 1.0379905830691333879 0.16334437395918477431 -0.038502380683208166368;7.234175650576776917 10.988087884638661151 10.02746755259285294 -0.0029663831849113687228;-2.9990960501507952785 0.75545042738673351401 1.59603598579593986 -3.2380913968825750793];

% Layer 2
b2 = [0.37774512735059817548;0.4036665500050141131];
LW2_1 = [0.021110225758093431603 0.37255213785645813207 -0.007934766490892364299 0.0061202981773088513395 -0.055342968054604146921 3.8062649766895401832e-05 0.002243447197628588817 0.00065037126728248950084 0.0036201086956116129353 0.068636745169869700645 3.0820419668308498551 0.0073980294627596782098 0.46458740391983854856 3.1114002441720711722 -0.012649132470609116344;-0.13473067475206798593 -0.24337475320429108328 0.047069787067313385853 -0.3452535455075303461 -0.053452501262767702916 0.22013495418652206936 0.11889319242909451857 0.14145448193422213712 0.1087143865048333935 0.24205377524133156464 0.013253758912237574574 0.13331653530151860165 0.13425125077818472752 0.030011440831748028429 -0.1786476431640083018];

% ===== SIMULATION ========
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
X=x';
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    % no processing
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*X{1,ts});
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = a2;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
Y(1,:)= ((Y(1,:))*(169.8391-37.1100))+37.1100; %IPF
Y(2,:)= ((Y(2,:))*(2435.1150-729.5885))+729.5885; %SEA
Y=-1.*Y'; %%%% times -1 due to the minimizing ObjFn %%%%%
Y(:,1)=-1.*Y(:,1);
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
end

% ===== MODULE FUNCTIONS ========

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
