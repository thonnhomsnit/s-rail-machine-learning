function [Y,Xf,Af] = tansig144(x,~,~)
%TANSIG144 neural network simulation function.
%
% Auto-generated by MATLAB, 21-Nov-2022 20:26:09.
% 
% [Y] = tansig144(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Layer 1
b1 = [0.81761924287439347037;4.1495190209724244212;-5.3310666156252235481;-0.54363033027034834976;-0.84966375231196267226;0.11912344879301244027;-3.225130468738674594;-2.564699523485161059;-1.053932715541552767;0.86786593399623168654;-2.9184993738591988865];
IW1_1 = [-1.1803310463752414439 -0.24934620415700886609 0.44745119161959823195 4.9826611603855903709;-1.9744937068026315874 -0.77385293204423488689 0.19579121757168588269 -2.6019174360610053398;4.4300821244462467163 -2.717959374242218118 0.58491868130884572263 1.4600766356096253062;1.7795904471817514114 -0.98954747110011831435 -0.14643831066433424248 0.028301645498293691305;3.6079215928177625905 3.0260155185036277103 -0.82005047469289638062 -2.9876826824114592895;1.1322594077987289118 -0.7350126269493402198 0.26066105054268318142 0.1514429079599218797;1.7192361718930948555 2.8623385043906957037 0.73328118634248640184 4.263288119399981646;-0.15240569036221865429 1.4791898881860021664 3.508484185055714466 4.1438369536047563457;-2.4391755511215760244 0.5667877837558461529 0.043368891658714825432 0.013005078901666123486;-1.8884405201817642261 0.16384718999276345897 2.4970460699811414251 -4.2935766453809209864;-1.868040798799320612 2.9212887955788504613 0.83302892545553142156 -3.9969189378877478802];

% Layer 2
b2 = [1.2464932794568512886;0.14124435485488845421];
LW2_1 = [0.0018622654691979548952 -0.0099036585349619593588 -0.023431183160040440494 -0.1438660666139903177 0.0042412532210189717377 -0.093884644016890436702 0.0077563476024062336447 0.00034642056366527825082 1.0336820746453061481 0.0029969697752404542319 -0.0017809982174542592429;0.36690085868991761942 0.33416509934657712133 0.17313555741834141255 -0.13037341625772091991 0.10251404061927796296 0.52567281762211270912 0.15319928463429366428 -0.046076076190882914174 0.56946366648829116475 -0.16465592965866832076 -0.10550213197003312227];

% ===== SIMULATION ========
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
X=x';
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    % no processing
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*X{1,ts});
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = a2;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
Y(1,:)= ((Y(1,:))*(163.2073517-37.10995))+37.10995; %IPF
Y(2,:)= ((Y(2,:))*(2435.154665-729.5885))+729.5885; %SEA
Y=-1.*Y'; %%%% times -1 due to the minimizing ObjFn %%%%%
Y(:,1)=-1.*Y(:,1);
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
end

% ===== MODULE FUNCTIONS ========
% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
