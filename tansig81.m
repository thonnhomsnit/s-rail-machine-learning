function [Y,Xf,Af] = tansig81(x,~,~)
%TANSIG81 neural network simulation function.
%
% Auto-generated by MATLAB, 21-Nov-2022 20:25:43.
% 
% [Y] = tansig81(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Layer 1
b1 = [-3.0444999076524497106;5.0376092020335123678;-1.2200452450902088408;-3.7502088149250352167;-0.63247450559251094937;-1.482497758096726459;1.6081389393858689374;-3.9589115890954169608;-0.30734031452573784549;0.38246048636821017297;-4.7150794148394217231];
IW1_1 = [3.9845087533411192027 3.166468289545275816 -1.6721142411349716461 -1.2914692306310726622;-2.7123551859561620958 -1.2357354264629716312 0.85018297379122720336 -2.4393122036169416766;1.78804930590632849 0.67964504223799571125 -0.79761843190892156574 -5.8382920641882494195;5.9932556753185268761 1.5721964182393901588 1.9662106287082583567 -0.051882971927158960668;-0.92168547225668651102 0.35597625652033693111 0.046429587419694669237 0.04267479952945460453;1.2967931102464382853 0.91709507399216916301 3.2181557743996269672 -3.6459024705560660884;-0.35189745851990217318 -0.19539055631840818172 1.2453054866515731458 -5.4301674909010229086;1.4950327326224022162 3.8137772755566619054 2.1921998255974259884 1.8980401257615626687;0.090560054494384326085 0.99014213269670303674 -0.67215033042524574558 -0.99714052743173509086;4.7442728899814037291 -0.5621938928651656342 -0.23569522505582596317 -0.73935219686520015081;-2.1154578291347991836 1.5230495861642332489 4.7187439552294945244 0.20217144932536409985];

% Layer 2
b2 = [1.2825256663271293878;-0.59168749321600033753];
LW2_1 = [0.010562835039125462872 -0.019493144632258346816 -0.010018121318253622731 -0.036495274353525321287 1.2916434481056131567 0.010775991995412700572 0.0016513298331544310708 0.0091912225104335311399 0.053217199302606293942 -0.0047184296480992163336 -0.0010760537210114040022;0.073099539373982322377 0.35911017031963277102 -0.30547228201387460755 0.066946289259327426691 -1.1805923439553855925 -0.014546553274088271437 -0.26272863613797736715 0.012736794733127084281 0.14939417782501743237 -0.31603363522640126604 0.070052666806222838036];

% ===== SIMULATION ========
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
X=x';
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    % no processing
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*X{1,ts});
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = a2;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
Y(1,:)= ((Y(1,:))*(163.2073517-65.22771454))+65.22771454; %IPF
Y(2,:)= ((Y(2,:))*(2217.028012-729.5885))+729.5885; %SEA
Y=-1.*Y'; %%%% times -1 due to the minimizing ObjFn %%%%%
Y(:,1)=-1.*Y(:,1);
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
end

% ===== MODULE FUNCTIONS ========
% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
