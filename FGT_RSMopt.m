close all;
load coeff.mat
        SEA0 = @(x)-( ...
    +a(1).*x(:,1) ...  
    +a(2).*x(:,2) ...
    +a(3).*x(:,1).*x(:,1) ...
    +a(4).*x(:,2).*x(:,2) ...
    +a(5).*x(:,1).*x(:,2) ...
    +a(6) ...
    );

         SEA10 = @(x)-( ...
    +b(1).*x(:,1) ...  
    +b(2).*x(:,2) ...
    +b(3).*x(:,1).*x(:,1) ...
    +b(4).*x(:,2).*x(:,2) ...
    +b(5).*x(:,1).*x(:,2) ...
    +b(6) ...
    );

          SEA20 = @(x)-( ...
    +c(1).*x(:,1) ...  
    +c(2).*x(:,2) ...
    +c(3).*x(:,1).*x(:,1) ...
    +c(4).*x(:,2).*x(:,2) ...
    +c(5).*x(:,1).*x(:,2) ...
    +c(6) ...
    );

        IPF0 = @(x)( ...
    +d(1).*x(:,1) ...  
    +d(2).*x(:,2) ...
    +d(3).*x(:,1).*x(:,1) ...
    +d(4).*x(:,2).*x(:,2) ...
    +d(5).*x(:,1).*x(:,2) ...
    +d(6) ...
    );

        IPF10 = @(x)( ...
    +e(1).*x(:,1) ...  
    +e(2).*x(:,2) ...
    +e(3).*x(:,1).*x(:,1) ...
    +e(4).*x(:,2).*x(:,2) ...
    +e(5).*x(:,1).*x(:,2) ...
    +e(6) ...
    );

        IPF20 = @(x)( ...
    +f(1).*x(:,1) ...  
    +f(2).*x(:,2) ...
    +f(3).*x(:,1).*x(:,1) ...
    +f(4).*x(:,2).*x(:,2) ...
    +f(5).*x(:,1).*x(:,2) ...
    +f(6) ...
    );
        %MultiObj.fun = @(x) [SEA0(x), IPF0(x)];
        %MultiObj.fun = @(x) [SEA10(x), IPF10(x)];
        MultiObj.fun = @(x) [SEA20(x), IPF20(x)];
        MultiObj.nVar = 2;
        MultiObj.var_min = [0 0];
        MultiObj.var_max = [1 1];
%end

% Parameters
params.Np = 100;        % Population size
params.pc = 0.9;        % Probability of crossover
params.pm = 0.5;        % Probability of mutation
params.maxgen = 50;     % Maximum number of generations
params.ms = 0.05;       % Mutation strength

% NSGA-II algorithm
[R,Rfit,Rrank] = NSGAII(params,MultiObj);   
row = sum(Rrank==1);
paretofront = Rfit(1:row,:);
optimalsolution = R(1:row,:);
