function [Y,Xf,Af] = new144tanh(x,~,~)
%NEW144TANH neural network simulation function.
%
% Auto-generated by MATLAB, 20-Nov-2022 18:18:16.
% 
% [Y] = new144tanh(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Layer 1
b1 = [-3.5017284687206227112;9.5929652484964442749;-2.1426963727675785165;-1.2740476703180145801;-1.4158422430241734968;-2.1064767634287648868;0.53916993363218945756;0.32312023757064700646;-1.0676088842989066574;1.8385374509174683411];
IW1_1 = [1.2222581703817108068 1.2313309632189155529 -0.32771476423017237289 2.1805949956725720895;-6.3496279113895290891 3.9687939001475838197 -1.952645190778053319 -6.858350187900492223;3.8361723443297437441 -1.3208317072259960767 0.30816971676536447644 2.643899303618851615;2.5389199310986581004 1.1275434299523945381 -0.95526481415811725917 -10.613961029997044605;-1.0405049706101272555 0.30399214341368946402 -0.0012271728606228740795 0.042078481354092443778;4.0422985504359472131 -0.088500007948654757506 2.6900145325876834157 -0.23593998202906812933;4.4833071966158097865 -1.1434498599657569873 -0.41057719406979792387 1.6557747062326795273;-2.5883219609381855619 0.71040204763568770563 4.2986116699918346384 -5.4568676112800318379;1.6115593573219439971 -3.1778636258271943937 0.54480838936152298224 0.85273978960984075925;-3.6307006570597599726 -1.4959178186758790297 1.2576084716705158151 0.21335718066348097199];

% Layer 2
b2 = [4.8238027560175122943;3.94302239045671854];
LW2_1 = [-0.0089551056997816489563 -0.014493586853014748389 0.0024581662350771685786 -0.0035822793260462935418 4.8374797399055644576 0.0090530361712626815363 -0.041078374314177490412 0.004795596608403407575 -0.051785771526647296492 -0.022147146427744356795;-0.55821804243144279578 -0.12765272901294313912 0.18581034140842117575 -0.35379130775704792367 4.8041115601980246552 0.088289833326271702219 0.34392126935840522384 -0.074049653713096283414 -0.06760198465000037682 -0.25172825315950286829];

% ===== SIMULATION ========
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
X=x';
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    % no processing
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*X{1,ts});
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = a2;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
Y(1,:)= ((Y(1,:))*(163.207-37.1100))+37.1100; %IPF
Y(2,:)= ((Y(2,:))*(2435.1150-729.5885))+729.5885; %SEA
Y=-1.*Y'; %%%% times -1 due to the minimizing ObjFn %%%%%
Y(:,1)=-1.*Y(:,1);
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
end

% ===== MODULE FUNCTIONS ========

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
