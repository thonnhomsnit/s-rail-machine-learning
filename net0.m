function [Y,Xf,Af] = net0(x,~,~)
%NET0 neural network simulation function.
%
% Auto-generated by MATLAB, 25-Jul-2022 14:10:18.
% 
% [Y] = net0(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0];
x1_step1.gain = [2;2];
x1_step1.ymin = -1;

% Layer 1
b1 = [-8.0151228016848463653;3.7579852747756241627;4.6967757194143624488;1.1824947750857577322;-2.2359828897131457381;-1.2760279088939392445;-0.085060175482908437217;-0.2949942896036715223;-1.4100683739668280481;2.2683494872548815025;3.0947134087064824826;6.3525793944737616314;-2.9037286478587187588];
IW1_1 = [7.27557465077347576 -2.2906943902358376519;-1.1976652872723834165 3.6367185152951009286;-7.3856587781637736967 1.9210754153811238076;-0.53531944273556619773 3.9791390485241016073;5.5265842051247702216 -4.446169430859934657;3.5599025993794493061 1.2535300848666028894;-1.0026383413421158242 4.879302105213348284;-2.6188880908887179899 -1.6687707497287596059;-1.2438843221321433941 -1.5432796915189481712;3.1554077456348643693 2.6409666864154832666;1.5388116155501230242 -1.4978243868742744382;4.2634305569097552535 4.205058645246375626;-6.5439440413377818473 5.4901368111451267495];

% Layer 2
b2 = [0.66318295968032614507;0.85599756451406883162];
LW2_1 = [0.10988189753545543614 -0.27658868152204435509 -0.09725160259794840556 -0.38198785488976944036 -0.10125291616838495712 0.059531624586659129261 -0.057809866440169797863 0.19347360252391590518 0.49084754171059696848 0.13600648726851977122 -0.19730032570742578324 0.022988803366061141831 0.04620876020011982499;-0.088768482972525444841 -0.46147638400988028051 0.0037258483612711470329 -0.32038650140746421924 0.009075431542190209519 -0.0103708893605930913 0.004093502253817245598 0.24723582282731271231 -0.90349536282647735508 -0.55774342766443307795 -0.5271141007104038767 -0.6929173227764187093 0.017598254844771409749];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.223931521356052;0.0106507416947259];
y1_step1.xoffset = [8.60350960690581;124.8690033];

% ===== SIMULATION ========
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
X=x';
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
Y=Y'; %%%% times -1 due to the minimizing ObjFn %%%%%
Y(:,1)=-1.*Y(:,1);
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
