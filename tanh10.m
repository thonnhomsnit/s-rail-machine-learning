function [Y,Xf,Af] = tanh10(X,~,~)
%TANH10 neural network simulation function.
%
% Auto-generated by MATLAB, 17-Apr-2023 13:29:42.
% 
% [Y] = tanh10(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 7xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Layer 1
b1 = [-1.6069934490683501771;-4.0753285437988946427;-1.8342998189032055922;1.4973372120229351268;3.0469514182049635131;-2.9726157413138256658;3.4642448104837710865;-1.6834132195315010261;-2.3178959248477619681;-2.4811795423691909157];
IW1_1 = [0.9314648717619811169 2.2405196212419715707 -3.4807369827185947742 0.71635298097266164596 0.47913774377147527739 1.9250699815598895093 -3.4552616769221753401;1.5104456607426219872 -0.37792138006094572189 -2.166917582304335177 -0.50436969938123998869 2.7335271402817089559 1.3740388220867028046 0.935743662628543027;1.2948158521897397133 3.8354989666280867588 0.45023175747356725118 2.4730697445909397558 -2.4605073667316901265 -2.0660480106963765579 3.9696860888043259408;-1.7531491394962830377 -3.7266854278029586389 -0.20183139669009497741 -2.5884621519135606604 2.4856239725370086191 2.3469475401660240266 -3.4303278880201251155;-3.810892799437043621 1.0405676304496831452 -0.94259349857009533391 -1.2111050798619360513 -3.447736772116094528 0.1211817076269338378 2.5630265069754534224;1.0750679329695163045 1.2594495874789810586 1.4054004395159886975 0.85614615936959848064 1.9042337401790370155 0.22383153739287386941 1.1243755638615327008;0.64681738981248693143 -1.8784717436477207375 -0.97842418349501181218 1.5906409212305236967 -0.5086961262666584993 -2.5016826825955198466 -2.0249887129318917545;2.2670479746887362005 0.17485094727004985016 0.21368667226027193706 2.3571476057415234884 1.0748168738450321058 -0.84196568641458502391 -0.75169177522294894356;1.4201545660177223862 1.269494837270450649 0.73458889311781316867 2.0492636585392163262 1.0689924198436373537 -0.48097965103019729716 1.1259766111744018424;-0.62140481968905514343 2.3777835560381843649 -1.6990936787112358441 -2.8635007615884155996 1.1091790329522872582 1.2524054339918246903 -0.30209159266530166699];

% Layer 2
b2 = 0.3295076229739253848;
LW2_1 = [0.2490260174293581763 0.6886602576789017105 -1.6961360795715927363 -1.6229002090706829975 -0.47449132936777244085 -0.86826624368503113605 -0.35935263570073744388 -1.0633184839823799361 1.4818588492583708582 -0.97489975359778391351];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    % no processing
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*X{1,ts});
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = a2;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
