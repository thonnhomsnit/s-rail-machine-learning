function [Y,Xf,Af] = annFn(x,~,~) %%%%%%%%%%%%%%%%%%%%%%%%%% change capital X to x, not original code %%%%%%%%%%%%
%ANNFN neural network simulation function.
%
% Auto-generated by MATLAB, 27-Apr-2022 21:04:16.
% 
% [Y] = annFn(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0];
x1_step1.gain = [2;2];
x1_step1.ymin = -1;

% Layer 1
b1 = [-5.466254375608182059;4.6556327926183582733;-2.4101194993961621016;-0.96808686173351254922;-0.93847441521270391629;-0.65880501741091590517;0.15300788598192813228;2.0145560481366402428;1.0993753238980188414;2.7693503726617825222;3.3282011843581624788;4.4989776021742802214;3.7442711746122854244];
IW1_1 = [5.1463059893290683533 -0.86146086168576241349;-3.7113689188629841453 1.9924676929818088134;3.3640258162069311965 -2.6420466471039047995;0.64234386535720955358 -2.5134476021492564435;0.0031740740849134294055 2.9272748156909593753;-0.0071580431636926733496 4.7951736316579172126;2.4722554008881170162 -1.1085142472172735406;-5.1452024580237978313 -2.5831007858324408488;3.3184345834620381233 -3.3454184494754981571;3.197805074022265881 -2.2721921747626696586;2.9377388274606448526 4.9699052126033969046;3.6369398082061428212 3.3095931997158314353;5.6999327655798452952 -2.0646328512350136108];

% Layer 2
b2 = [-0.011465522183257442768;-0.38179881047011038353];
LW2_1 = [-0.91399998530325121671 -0.85668227723219891878 -0.15745175800171073988 0.53375538458498195116 0.091949124083980593447 -0.16756670261981385095 -0.080129787876037084082 -0.018479900808466342976 0.053899788198237874592 0.12106745652352995934 -0.008174287997400588035 0.0946922041431957906 -0.2213822922028241269;0.084767608573228347968 0.10160527195975693759 -0.082513213221791947838 0.33556621118789936586 -0.029782337217556256737 -0.26952911456397110612 -0.10336396147355553232 0.12287991129338571294 0.048864017080649413405 0.3537450488760441325 -0.36767330665233244336 0.73636594935418153707 -0.21861908034699797931];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.181631685536509;0.0647651841341018];
y1_step1.xoffset = [8.87733479623863;48.2254209634932];

% ===== SIMULATION ========
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
X=x';
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
Y=-1.*Y'; %%%% times -1 due to the minimizing ObjFn %%%%%
Y(:,1)=-1.*Y(:,-1);
%%%%%%%%%%%%%%%%%%%%%%%%%% transpose output, not original code %%%%%%%%%%%%
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
